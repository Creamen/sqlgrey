To begin with you need a sqlgrey user :
- adduser sqlgrey.

#####################
## Database choice ##
#####################

SQLite : quick and dirty way. The database is integrated with sqlgrey.
MySQL : lightweight DBRMS, quite fast but not as stable and standard
	 compliant as PostgreSQL.
PostgreSQL : full-fledge, very mature DBRMS.

###########
## SQLite 

# Dependancies :
you need the DBD::SQLite perl module (and libsqlite of course).

# Howto :
Read the man page (sqlgrey --man) and use "--db-type=SQLite --db-name=<db>"
parameters or setup /etc/sqlgrey.conf

# Note :
sqlgrey will create the file storing database data in the working
directory.

##########
## MySQL

# Dependancies :
you need the DBD::MySQL perl module and a working MySQL server.

# Howto :
Create a sqlgrey database and a mysql sqlgrey user:
sous mysql:
> CREATE DATABASE sqlgrey;
> GRANT ALL ON sqlgrey.* TO sqlgrey@localhost;

Read the man page (sqlgrey --man) and use the "--db-type=MySQL" parameter

# Note :
MySQL is really fast. I'd recommend it if you don't want to host critical
databases with high access concurrency.

###############
## PostgreSQL

# Dependancies :
you need the DBD::Pg perl module and a working PostgreSQL server.

# Howto :
1/ Create a sqlgrey database and a PostgreSQL sqlgrey user:
as postgres user (su - postgres):

-bash-2.05b$ createuser sqlgrey
Shall the new user be allowed to create databases? (y/n) y
Shall the new user be allowed to create more new users? (y/n) n
CREATE USER
-bash-2.05b$

You'll have to check your pg_hba.conf file if you're not sure about
the access control configuration. For the next step, you need to be
able to connect as sqlgrey.

-bash-2.05b$ createdb -U sqlgrey x sqlgrey
CREATE DATABASE
-bash-2.05b$

Pay attention to the access controls : as Unix user sqlgrey, you must
be able to connect to the sqlgrey database as sqlgrey PostgreSQL user...
Look into pg_hba.conf and if needed set a password for the PostgreSQL
sqlgrey user.

###########################
## Postfix configuration ##
###########################

Start by adding check_policy_service after reject_unauth_destination in
/etc/postfix/main.cf :

 smtpd_recipient_restrictions =
               ...
               reject_unauth_destination
               check_policy_service inet:127.0.0.1:2501

This assumes sqlgrey will listen on the TCP 2501 port (default).
check_policy_service must come after reject_unauth_destination or
you'll end up being an open-relay and listed in RBLs (you don't want
that).

##################
## Whitelisting ##
##################

Some MTA don't play well with greylisting (often because they don't
respect the RFCs). To work around this problem (that your users won't
fail to report to you when it happens):
- don't run sqlgrey in quiet mode (by default it will log what you need)
- ask your user for the e-mail of the person that unsuccesfully tried
 to send mail to her/him and when the unsuccessfull attempt occured.
- grep your mail logs for the address, you'll find a line like this
<timestamp> <system> sqlgrey[nnn]: new: www.xxx.yyy.zzz: <sender_address> -> <your_user>
by default, one day later you'll find this line:
<timestamp> <system> sqlgrey[nnn]: Probable spam: www.xxx.yyy.zzz: <sender_address> -> <your_user> at <timestamp>

What matters to you is the IP address (or the class C network) and
the domain name it is associated with. If Postfix could find a reliable
domain name (the reverse lookup must itself point to the IP address),
you'll find it in one of the lines in your log before the first
sqlgrey log line.

If you can get a reliable domain name, put it in
/etc/sqlgrey/clients_fqdn_whitelist.local
do *not* touch the /etc/sqlgrey/clients_fqdn_whitelist file as it will
be overwritten by a future sqlgrey installation.
The top of /etc/sqlgrey/clients_fqdn_whitelist explains the expected
formats.
You don't need to restart sqlgrey as it monitors the ".local" files
and reload them as soon as they change or when they are created for
the first time.

If you can't get a reliable domain name, just put the IP address in
the /etc/sqlgrey/clients_ip_whitelist.local file. If you need to,
you can add a whole class C network by putting a line with only the
three first bytes of the IP addresses.

As it's quite important I repeat: only look for the installed
clients_*_whitelist files for reference and put your own entries
in the corresponding .local files.

You are encouraged to subscribe to the sqlgrey-users mailing-list
(see http://lists.sourceforge.net/lists/listinfo/sqlgrey-users)
and submit the IP address and domain names you have to add to
your .local files to make your users happy and the reason why
you did so (see comments on why the existing systems are added).

#################
# RPM Packaging #
#################

Some of the steps required to install SQLgrey are covered by a RPM
package built with the included spec file:
- creates a sqlgrey user,
- installs a /etc/init.d/sqlgrey SysV init file,
- installs a /etc/sqlgrey/sqlgrey.conf config file
- installs /etc/sqlgrey/clients_*_whitelist files

What's left to you is the Postfix and Database setup.
